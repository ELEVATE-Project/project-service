version: '3'
services:
  # Zookeeper config
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.3.0'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - elevate_net
    logging:
      driver: none

  # Kafka config
  kafka:
    image: 'confluentinc/cp-kafka:7.3.0'
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - elevate_net
    logging:
      driver: none

  # Redis config
  redis:
    image: 'redis:7.0.0'
    container_name: redis
    restart: 'always'
    ports:
      - '6379:6379'
    networks:
      - elevate_net
    logging:
      driver: none

  # Redis bullmq config
  redis_bullmq:
    image: 'redis:7.0.0'
    container_name: redis_bullmq
    restart: 'always'
    command: redis-server --appendonly yes --maxmemory-policy noeviction
    ports:
      - '6380:6379'
    networks:
      - elevate_net
    volumes:
      - redis_data:/data

  # Mongo config
  mongo:
    image: 'mongo:4.4.14'
    restart: 'always'
    ports:
      - '27017:27017'
    networks:
      - elevate_net
    volumes:
      - mongo-data:/data/db
    logging:
      driver: none

  # Pgadmin config
  pgadmin:
    image: dpage/pgadmin4
    container_name: elevate-pgadmin
    restart: always
    ports:
      - '5500:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@shikshalokam.org
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - elevate_net
    logging:
      driver: none

  # Gotenberg config
  gotenberg:
    image: gotenberg/gotenberg:latest
    container_name: gotenberg
    ports:
      - '3003:3000'
    networks:
      - elevate_net
    restart: 'always'

  # Citus config
  citus:
    image: citusdata/citus:11.2.0
    container_name: 'citus_master'
    ports:
      - 5432:5432
    environment: &AUTH
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      PGUSER: '${POSTGRES_USER:-postgres}'
      PGPASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      POSTGRES_DB: 'postgres'
      POSTGRES_HOST_AUTH_METHOD: '${POSTGRES_HOST_AUTH_METHOD:-trust}'
      POSTGRES_LOG_STATEMENT: 'all' # Enable query logging (set to 'all' for all queries)
    networks:
      - elevate_net

  # Scheduler config
  scheduler:
    image: shikshalokamqa/elevate-scheduler:2.2
    ports:
      - '3000:3001'
    command: ['nodemon', 'app.js']
    environment:
      - MONGODB_URL=mongodb://mongo:27017/elevate-scheduler
      - KAFKA_URL=kafka:9092
    env_file:
      - ${scheduler_env}
    depends_on:
      - kafka
      - redis
    networks:
      - elevate_net

  # Notfication config
  notification:
    image: shikshalokamqa/elevate-notification:2.2
    ports:
      - '3001:3001'
    command: ['nodemon', 'app.js']
    environment:
      - KAFKA_URL=kafka:9092
    env_file:
      - ${notification_env}
    depends_on:
      - kafka
    networks:
      - elevate_net

  # User config
  user:
    image: shikshalokamqa/elevate-user:2.5.5
    ports:
      - '3002:3001'
    command: >
      bash -c "npm run db:init && npm run db:seed:all && (echo 'Running nodeee' && nodemon app.js &); (while ! curl -sSf http://user:3001 > /dev/null; do sleep 1; done && echo 'Service is up' && /bin/bash -c 'cd scripts && echo Running user service scripts && node insertDefaultOrg.js && node viewsScript.js && node -r module-alias/register uploadSampleCSV.js'); tail -f /dev/null"
    environment:
      - DEV_DATABASE_URL=postgres://postgres:postgres@citus_master:5432/elevate-user
      - KAFKA_URL=kafka:9092
      - REDIS_HOST=redis://redis:6379
    depends_on:
      - kafka
      - citus
      - redis
    networks:
      - elevate_net
    env_file:
      - ${users_env}

  # Interface config
  interface:
    image: shikshalokamqa/elevate-interface:2.5
    ports:
      - '3567:3567'
    command: ['node', '--trace-warnings', 'app.js']
    networks:
      - elevate_net
    env_file:
      - ${interface_env}

  # Project config
  projects:
    build: .
    image: elevate/elevate_projects:1.0
    volumes:
      - .:/opt/projects
    ports:
      - '5000:5000'
    command: ['nodemon', 'app.js']
    env_file:
      - ./.env
    depends_on:
      - kafka
      - mongo
    networks:
      - elevate_net

  # Entity-management config
  entity_management:
    build: ../../entity-management/
    image: elevate/entity-management:1.0
    volumes:
      - ../../entity-management/src/:/var/src
    ports:
      - '5001:5001'
    command: ['nodemon', 'app.js']
    env_file:
      - ../../entity-management/src/.env
    depends_on:
      - redis
      - mongo
    networks:
      - elevate_net

networks:
  elevate_net:
    external: false
volumes:
  zookeeper-data:
  kafka-data:
  mongo-data:
  redis_data:
  healthcheck-volume:
